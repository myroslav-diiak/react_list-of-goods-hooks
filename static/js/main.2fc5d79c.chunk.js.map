{"version":3,"sources":["App.tsx","components/Button.tsx","index.tsx"],"names":["SortType","Button","children","className","props","type","goodsFromServer","App","useState","isReversed","setIsReverse","sortType","setSortType","visibleGoods","sort","firstItem","nextItem","ALPABET","localeCompare","LENGTH","length","reverse","classNames","onClick","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,oHCbQC,EAA0B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAcC,EAA3B,wBACrC,gDACEC,KAAK,SACLF,UAAS,iBAAYA,IACjBC,GAHN,aAKGF,MDNQI,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGN,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA0BE,IAAMO,EAAgB,WAC3B,MAAmCC,oBAAS,GAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAY,UAAOP,GAiBzB,OAfAO,EAAaC,MAAK,SAACC,EAAWC,GAC5B,OAAQL,GACN,KAAKX,EAASiB,QACZ,OAAOF,EAAUG,cAAcF,GACjC,KAAKhB,EAASmB,OACZ,OAAOJ,EAAUK,OAASJ,EAASI,OACrC,QACE,OAAO,MAITX,GACFI,EAAaQ,UAIb,sBAAKlB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACEA,UAAWmB,IAAW,SAAU,UAAW,CACzC,WAAYX,IAAaX,EAASiB,UAEpCM,QAAS,WACPX,EAAYZ,EAASiB,UALzB,iCAWA,cAAC,EAAD,CACEd,UAAWmB,IAAW,SAAU,aAAc,CAC5C,WAAYX,IAAaX,EAASmB,SAEpCI,QAAS,WACPX,EAAYZ,EAASmB,SALzB,4BAWA,cAAC,EAAD,CACEhB,UAAWmB,IAAW,SAAU,aAAc,CAC5C,YAAab,IAEfc,QAAS,kBAAMb,GAAcD,IAJ/B,sBASEA,GAA2B,IAAbE,IACd,cAAC,EAAD,CACER,UAAU,4BACVoB,QAAS,WACPb,GAAa,GACbE,EAAY,IAJhB,sBAYJ,6BACGC,EAAaW,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YEhHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2fc5d79c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { Button } from './components';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReverse] = useState(false);\n  const [sortType, setSortType] = useState(0);\n\n  const visibleGoods = [...goodsFromServer];\n\n  visibleGoods.sort((firstItem, nextItem) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return firstItem.localeCompare(nextItem);\n      case SortType.LENGTH:\n        return firstItem.length - nextItem.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <Button\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.ALPABET,\n          })}\n          onClick={() => {\n            setSortType(SortType.ALPABET);\n          }}\n        >\n          Sort alphabetically\n        </Button>\n\n        <Button\n          className={classNames('button', 'is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={() => {\n            setSortType(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </Button>\n\n        <Button\n          className={classNames('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReverse(!isReversed)}\n        >\n          Reverse\n        </Button>\n\n        {(isReversed || sortType !== 0) && (\n          <Button\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setIsReverse(false);\n              setSortType(0);\n            }}\n          >\n            Reset\n          </Button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(item => (\n          <li data-cy=\"Good\" key={item}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  children: React.ReactNode;\n};\n\nexport const Button: React.FC<Props> = ({ children, className, ...props }) => (\n  <button\n    type=\"button\"\n    className={`button ${className}`}\n    {...props}\n  >\n    {children}\n  </button>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}